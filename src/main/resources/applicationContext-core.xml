<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jee="http://www.springframework.org/schema/jee"
	
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/p 
	http://www.springframework.org/schema/p/spring-p.xsd
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee.xsd">
	
	<!-- 读取配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- dataSource -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${dataSource.driverClass}"/>
		<property name="jdbcUrl" 	 value="${dataSource.jdbcUrl}"/>
		<property name="user" 		 value="${dataSource.user}"/>
		<property name="password" 	 value="${dataSource.password}"/>
	</bean>
	<!-- spring整合mybatis -->
	<!-- 1.配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 告诉spring去哪里加载mybatis配置文件 -->
		<property name="configLocation"  value="classpath:mybatisConfig.xml"/>
	</bean>
	<!-- UserDao -->
	<!-- <bean name="userDao" class="com.spring_mybatis_demo.dao.UserDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
	</bean> -->
	<!-- mapper动态代理开发
	<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		注入SqlSessionFactory
		<property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
		配置接口
		<property name="mapperInterface" value="com.spring_mybatis_demo.mapper.UserMapper"/>
	</bean> -->
	<!-- mapper扫描开发 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.blog.mapper"/>
	</bean>
	
	<!-- shiro登录安全验证 -->
	<!-- 1.自定义realm -->
	<bean id="myRealm" class="com.blog.realm.MyReaml"></bean>
	<!-- 配置安全管理器. -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"/>
	</bean>
	<!-- 3.配置shrio过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- shrio的核心安全接口 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 验证失败的跳转路径 -->
		<property name="loginUrl" value="/views/admin/login.jsp"/>
		<!-- 过滤内容 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 访问登陆页面不过滤 anon-->
				/views/admin/login=anon
				<!-- 访问admin下的所有都需要登录 authc-->
				/views/admin/**.jsp=authc
			</value>
		</property>
	</bean>
	<!-- 4.保证shrio内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<!-- 5.开启shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"></bean>
	<!-- 6. 添加验证-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>
	
	<!-- 开启组件扫描，默认开启注解 -->
	<context:component-scan base-package="com.blog.*"/>
	<!-- 配置事务核心管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 开启注解事务 -->
	<tx:annotation-driven/>
</beans>